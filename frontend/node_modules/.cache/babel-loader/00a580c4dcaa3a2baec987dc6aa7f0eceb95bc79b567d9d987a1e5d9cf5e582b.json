{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = new Set();\n    this.errorHandlers = new Set();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000; // Start with 1 second\n    this.maxReconnectDelay = 10000; // Max 10 seconds\n    this.connectionStatus = 'disconnected';\n    this.connectionStatusListeners = new Set();\n    this.reconnectTimeout = null;\n    this.url = null;\n    this.dispatch = null;\n  }\n\n  // Set the Redux dispatch function\n  setDispatch(dispatch) {\n    this.dispatch = dispatch;\n  }\n  connect(url) {\n    this.url = url;\n    console.log(`[WebSocket] Initializing connection to ${url}`);\n    return new Promise((resolve, reject) => {\n      try {\n        // Close existing connection if any\n        if (this.socket) {\n          console.log('[WebSocket] Closing existing connection...');\n          this.disconnect();\n        }\n        console.log(`[WebSocket] Creating new WebSocket instance to ${url}`);\n        this.socket = new WebSocket(url);\n        this.updateConnectionStatus('connecting');\n\n        // Notify Redux store about connection attempt\n        if (this.dispatch) {\n          this.dispatch({\n            type: 'network/updateCaptureStatus',\n            payload: {\n              status: 'connecting'\n            }\n          });\n        }\n\n        // Bind event handlers\n        this.socket.onopen = event => {\n          console.log('[WebSocket] Connection established', {\n            url: this.socket.url,\n            readyState: this.socket.readyState,\n            extensions: this.socket.extensions,\n            protocol: this.socket.protocol\n          });\n          this.reconnectAttempts = 0;\n          this.reconnectDelay = 1000;\n          this.updateConnectionStatus('connected');\n\n          // Notify Redux store about successful connection\n          if (this.dispatch) {\n            this.dispatch({\n              type: 'network/updateCaptureStatus',\n              payload: {\n                status: 'connected'\n              }\n            });\n          }\n          resolve();\n        };\n        this.socket.onerror = error => {\n          var _this$socket, _this$socket2;\n          const errorMessage = `[WebSocket] Connection error: ${error.message || 'Unknown error'}`;\n          console.error(errorMessage, {\n            readyState: (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState,\n            url: (_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.url,\n            error\n          });\n          this.notifyErrorHandlers(error);\n          this.updateConnectionStatus('error');\n\n          // Only reject if this is the initial connection attempt\n          if (this.reconnectAttempts === 0) {\n            const wsError = new Error(errorMessage);\n            console.error('[WebSocket] Rejecting connection promise', wsError);\n            reject(wsError);\n          }\n        };\n        this.socket.onmessage = event => {\n          try {\n            this.processMessage(event.data);\n          } catch (error) {\n            console.error('Error handling WebSocket message:', error, event.data);\n            this.notifyErrorHandlers(error);\n          }\n        };\n        this.socket.onclose = event => {\n          console.log('[WebSocket] Connection closed', {\n            code: event.code,\n            reason: event.reason,\n            wasClean: event.wasClean\n          });\n          const newStatus = 'disconnected';\n          this.updateConnectionStatus(newStatus);\n\n          // Notify Redux store about disconnection\n          if (this.dispatch) {\n            this.dispatch({\n              type: 'network/updateCaptureStatus',\n              payload: {\n                status: newStatus\n              }\n            });\n          }\n          this.attemptReconnect();\n        };\n      } catch (error) {\n        console.error('WebSocket Connection Error:', error);\n        reject(error);\n      }\n    });\n  }\n  updateConnectionStatus(status) {\n    this.connectionStatus = status;\n    this.notifyStatusChange(status);\n  }\n  onStatusChange(callback) {\n    this.connectionStatusListeners.add(callback);\n    return () => this.connectionStatusListeners.delete(callback);\n  }\n  notifyStatusChange(status) {\n    this.connectionStatusListeners.forEach(callback => {\n      try {\n        callback(status);\n      } catch (error) {\n        console.error('Error in status change handler:', error);\n      }\n    });\n  }\n  getStatus() {\n    return this.connectionStatus;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.messageHandlers.clear();\n  }\n  send(message) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      try {\n        const messageString = typeof message === 'string' ? message : JSON.stringify(message);\n        this.socket.send(messageString);\n        return true;\n      } catch (error) {\n        console.error('Error sending WebSocket message:', error);\n        return false;\n      }\n    }\n    console.warn('WebSocket is not connected');\n    return false;\n  }\n  addMessageHandler(handler) {\n    this.messageHandlers.add(handler);\n\n    // Return cleanup function\n    return () => this.messageHandlers.delete(handler);\n  }\n  removeMessageHandler(handler) {\n    this.messageHandlers.delete(handler);\n  }\n  processMessage(message) {\n    // Skip empty messages\n    if (!message || typeof message !== 'string' || message.trim() === '') {\n      console.warn('Received empty WebSocket message');\n      return;\n    }\n    let data;\n    try {\n      data = JSON.parse(message);\n      console.debug('Received WebSocket message:', data);\n    } catch (error) {\n      console.error('Failed to parse WebSocket message:', {\n        error: error.message,\n        message: message\n      });\n      return;\n    }\n\n    // Handle different message formats\n    try {\n      // Notify all message handlers\n      this.messageHandlers.forEach(handler => {\n        try {\n          handler(data);\n        } catch (error) {\n          console.error('Error in message handler:', error);\n        }\n      });\n\n      // Dispatch to Redux if it's a packet or status update\n      if (this.dispatch) {\n        // Handle different message formats\n        if (data.type) {\n          // Format: { type: 'packet', data: {...} }\n          if (data.type === 'packet' && data.data) {\n            this.dispatch({\n              type: 'network/addPacket',\n              payload: data.data\n            });\n          } else if (data.type === 'status') {\n            this.dispatch({\n              type: 'network/updateCaptureStatus',\n              payload: data.data || data\n            });\n          } else if (data.type === 'interfaces') {\n            this.dispatch({\n              type: 'network/updateInterfaces',\n              payload: data.data || data\n            });\n          } else if (data.type === 'stats') {\n            this.dispatch({\n              type: 'network/updateStats',\n              payload: data.data || data\n            });\n          } else if (data.type === 'bandwidth') {\n            this.dispatch({\n              type: 'network/updateBandwidth',\n              payload: data.data || data\n            });\n          }\n        } else if (data.protocol) {\n          // Format: Direct packet object\n          this.dispatch({\n            type: 'network/addPacket',\n            payload: data\n          });\n        } else if (data.isCapturing !== undefined) {\n          // Format: Direct status object\n          this.dispatch({\n            type: 'network/updateCaptureStatus',\n            payload: data\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error processing WebSocket message:', {\n        error: error.message,\n        stack: error.stack,\n        message: message,\n        parsedData: data\n      });\n    }\n  }\n  onError(handler) {\n    if (typeof handler === 'function') {\n      this.errorHandlers.add(handler);\n      return () => this.errorHandlers.delete(handler);\n    }\n    return () => {};\n  }\n  removeErrorHandler(handler) {\n    this.errorHandlers.delete(handler);\n  }\n  notifyErrorHandlers(error) {\n    this.errorHandlers.forEach(handler => {\n      try {\n        handler(error);\n      } catch (err) {\n        console.error('Error in error handler:', err);\n      }\n    });\n  }\n  attemptReconnect() {\n    this.reconnectAttempts++;\n    this.reconnectDelay = Math.min(this.reconnectDelay * 2, this.maxReconnectDelay);\n    this.reconnectTimeout = setTimeout(() => {\n      this.connect(this.url);\n    }, this.reconnectDelay);\n  }\n}\n\n// Export a singleton instance\nexport const webSocketService = new WebSocketService();\n\n// Helper hook for React components\nexport const useWebSocket = (onMessage, dependencies = []) => {\n  _s();\n  const [isConnected, setIsConnected] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  React.useEffect(() => {\n    const handleMessage = message => {\n      if (message.type === 'connection/established') {\n        setIsConnected(true);\n        setError(null);\n      } else if (message.type === 'connection/error') {\n        setError(message.payload);\n      }\n      if (onMessage) {\n        onMessage(message);\n      }\n    };\n\n    // Add the handler\n    const removeHandler = webSocketService.addMessageHandler(handleMessage);\n\n    // Clean up\n    return () => {\n      removeHandler();\n    };\n  }, [onMessage, ...dependencies]);\n};\n_s(useWebSocket, \"pC3TVIB/x3LrkaCp5yIVZyn0G4I=\");","map":{"version":3,"names":["React","useEffect","useState","WebSocketService","constructor","socket","messageHandlers","Set","errorHandlers","reconnectAttempts","maxReconnectAttempts","reconnectDelay","maxReconnectDelay","connectionStatus","connectionStatusListeners","reconnectTimeout","url","dispatch","setDispatch","connect","console","log","Promise","resolve","reject","disconnect","WebSocket","updateConnectionStatus","type","payload","status","onopen","event","readyState","extensions","protocol","onerror","error","_this$socket","_this$socket2","errorMessage","message","notifyErrorHandlers","wsError","Error","onmessage","processMessage","data","onclose","code","reason","wasClean","newStatus","attemptReconnect","notifyStatusChange","onStatusChange","callback","add","delete","forEach","getStatus","close","clear","send","OPEN","messageString","JSON","stringify","warn","addMessageHandler","handler","removeMessageHandler","trim","parse","debug","isCapturing","undefined","stack","parsedData","onError","removeErrorHandler","err","Math","min","setTimeout","webSocketService","useWebSocket","onMessage","dependencies","_s","isConnected","setIsConnected","setError","handleMessage","removeHandler"],"sources":["C:/Users/Akshita/OneDrive - somaiya.edu/Akshita/Projects/SentinelAi/frontend/src/services/websocketService.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = new Set();\n    this.errorHandlers = new Set();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000; // Start with 1 second\n    this.maxReconnectDelay = 10000; // Max 10 seconds\n    this.connectionStatus = 'disconnected';\n    this.connectionStatusListeners = new Set();\n    this.reconnectTimeout = null;\n    this.url = null;\n    this.dispatch = null;\n  }\n\n  // Set the Redux dispatch function\n  setDispatch(dispatch) {\n    this.dispatch = dispatch;\n  }\n\n  connect(url) {\n    this.url = url;\n    console.log(`[WebSocket] Initializing connection to ${url}`);\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Close existing connection if any\n        if (this.socket) {\n          console.log('[WebSocket] Closing existing connection...');\n          this.disconnect();\n        }\n\n        console.log(`[WebSocket] Creating new WebSocket instance to ${url}`);\n        this.socket = new WebSocket(url);\n        this.updateConnectionStatus('connecting');\n\n        // Notify Redux store about connection attempt\n        if (this.dispatch) {\n          this.dispatch({ type: 'network/updateCaptureStatus', payload: { status: 'connecting' } });\n        }\n\n        // Bind event handlers\n        this.socket.onopen = (event) => {\n          console.log('[WebSocket] Connection established', {\n            url: this.socket.url,\n            readyState: this.socket.readyState,\n            extensions: this.socket.extensions,\n            protocol: this.socket.protocol\n          });\n          this.reconnectAttempts = 0;\n          this.reconnectDelay = 1000;\n          this.updateConnectionStatus('connected');\n\n          // Notify Redux store about successful connection\n          if (this.dispatch) {\n            this.dispatch({ type: 'network/updateCaptureStatus', payload: { status: 'connected' } });\n          }\n\n          resolve();\n        };\n\n        this.socket.onerror = (error) => {\n          const errorMessage = `[WebSocket] Connection error: ${error.message || 'Unknown error'}`;\n          console.error(errorMessage, {\n            readyState: this.socket?.readyState,\n            url: this.socket?.url,\n            error\n          });\n          this.notifyErrorHandlers(error);\n          this.updateConnectionStatus('error');\n\n          // Only reject if this is the initial connection attempt\n          if (this.reconnectAttempts === 0) {\n            const wsError = new Error(errorMessage);\n            console.error('[WebSocket] Rejecting connection promise', wsError);\n            reject(wsError);\n          }\n        };\n\n        this.socket.onmessage = (event) => {\n          try {\n            this.processMessage(event.data);\n          } catch (error) {\n            console.error('Error handling WebSocket message:', error, event.data);\n            this.notifyErrorHandlers(error);\n          }\n        };\n\n        this.socket.onclose = (event) => {\n          console.log('[WebSocket] Connection closed', {\n            code: event.code,\n            reason: event.reason,\n            wasClean: event.wasClean\n          });\n\n          const newStatus = 'disconnected';\n          this.updateConnectionStatus(newStatus);\n\n          // Notify Redux store about disconnection\n          if (this.dispatch) {\n            this.dispatch({ type: 'network/updateCaptureStatus', payload: { status: newStatus } });\n          }\n\n          this.attemptReconnect();\n        };\n      } catch (error) {\n        console.error('WebSocket Connection Error:', error);\n        reject(error);\n      }\n    });\n  }\n\n  updateConnectionStatus(status) {\n    this.connectionStatus = status;\n    this.notifyStatusChange(status);\n  }\n\n  onStatusChange(callback) {\n    this.connectionStatusListeners.add(callback);\n    return () => this.connectionStatusListeners.delete(callback);\n  }\n\n  notifyStatusChange(status) {\n    this.connectionStatusListeners.forEach(callback => {\n      try {\n        callback(status);\n      } catch (error) {\n        console.error('Error in status change handler:', error);\n      }\n    });\n  }\n\n  getStatus() {\n    return this.connectionStatus;\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.messageHandlers.clear();\n  }\n\n  send(message) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      try {\n        const messageString = typeof message === 'string' ? message : JSON.stringify(message);\n        this.socket.send(messageString);\n        return true;\n      } catch (error) {\n        console.error('Error sending WebSocket message:', error);\n        return false;\n      }\n    }\n    console.warn('WebSocket is not connected');\n    return false;\n  }\n\n  addMessageHandler(handler) {\n    this.messageHandlers.add(handler);\n\n    // Return cleanup function\n    return () => this.messageHandlers.delete(handler);\n  }\n\n  removeMessageHandler(handler) {\n    this.messageHandlers.delete(handler);\n  }\n\n  processMessage(message) {\n    // Skip empty messages\n    if (!message || typeof message !== 'string' || message.trim() === '') {\n      console.warn('Received empty WebSocket message');\n      return;\n    }\n\n    let data;\n    try {\n      data = JSON.parse(message);\n      console.debug('Received WebSocket message:', data);\n    } catch (error) {\n      console.error('Failed to parse WebSocket message:', {\n        error: error.message,\n        message: message\n      });\n      return;\n    }\n\n    // Handle different message formats\n    try {\n      // Notify all message handlers\n      this.messageHandlers.forEach(handler => {\n        try {\n          handler(data);\n        } catch (error) {\n          console.error('Error in message handler:', error);\n        }\n      });\n\n      // Dispatch to Redux if it's a packet or status update\n      if (this.dispatch) {\n        // Handle different message formats\n        if (data.type) {\n          // Format: { type: 'packet', data: {...} }\n          if (data.type === 'packet' && data.data) {\n            this.dispatch({ type: 'network/addPacket', payload: data.data });\n          } else if (data.type === 'status') {\n            this.dispatch({ type: 'network/updateCaptureStatus', payload: data.data || data });\n          } else if (data.type === 'interfaces') {\n            this.dispatch({ type: 'network/updateInterfaces', payload: data.data || data });\n          } else if (data.type === 'stats') {\n            this.dispatch({ type: 'network/updateStats', payload: data.data || data });\n          } else if (data.type === 'bandwidth') {\n            this.dispatch({ type: 'network/updateBandwidth', payload: data.data || data });\n          }\n        } else if (data.protocol) {\n          // Format: Direct packet object\n          this.dispatch({ type: 'network/addPacket', payload: data });\n        } else if (data.isCapturing !== undefined) {\n          // Format: Direct status object\n          this.dispatch({ type: 'network/updateCaptureStatus', payload: data });\n        }\n      }\n    } catch (error) {\n      console.error('Error processing WebSocket message:', {\n        error: error.message,\n        stack: error.stack,\n        message: message,\n        parsedData: data\n      });\n    }\n  }\n\n  onError(handler) {\n    if (typeof handler === 'function') {\n      this.errorHandlers.add(handler);\n      return () => this.errorHandlers.delete(handler);\n    }\n    return () => { };\n  }\n\n  removeErrorHandler(handler) {\n    this.errorHandlers.delete(handler);\n  }\n\n  notifyErrorHandlers(error) {\n    this.errorHandlers.forEach(handler => {\n      try {\n        handler(error);\n      } catch (err) {\n        console.error('Error in error handler:', err);\n      }\n    });\n  }\n\n  attemptReconnect() {\n    this.reconnectAttempts++;\n    this.reconnectDelay = Math.min(this.reconnectDelay * 2, this.maxReconnectDelay);\n    this.reconnectTimeout = setTimeout(() => {\n      this.connect(this.url);\n    }, this.reconnectDelay);\n  }\n}\n\n// Export a singleton instance\nexport const webSocketService = new WebSocketService();\n\n// Helper hook for React components\nexport const useWebSocket = (onMessage, dependencies = []) => {\n  const [isConnected, setIsConnected] = React.useState(false);\n  const [error, setError] = React.useState(null);\n\n  React.useEffect(() => {\n    const handleMessage = (message) => {\n      if (message.type === 'connection/established') {\n        setIsConnected(true);\n        setError(null);\n      } else if (message.type === 'connection/error') {\n        setError(message.payload);\n      }\n\n      if (onMessage) {\n        onMessage(message);\n      }\n    };\n\n    // Add the handler\n    const removeHandler = webSocketService.addMessageHandler(handleMessage);\n\n    // Clean up\n    return () => {\n      removeHandler();\n    };\n  }, [onMessage, ...dependencies]);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}