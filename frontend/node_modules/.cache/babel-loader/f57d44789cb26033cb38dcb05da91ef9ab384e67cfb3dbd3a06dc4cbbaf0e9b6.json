{"ast":null,"code":"class WebSocketService{constructor(){this.socket=null;this.messageHandlers=new Set();this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.reconnectDelay=1000;// Start with 1 second\nthis.maxReconnectDelay=10000;// Max 10 seconds\nthis.connectionStatus='disconnected';this.connectionStatusListeners=new Set();}connect(url){return new Promise((resolve,reject)=>{try{// Close existing connection if any\nif(this.socket){if(this.socket.readyState===WebSocket.OPEN||this.socket.readyState===WebSocket.CONNECTING){console.log('Closing existing WebSocket connection');this.socket.close();}this.socket=null;}console.log(\"Connecting to WebSocket at \".concat(url));this.socket=new WebSocket(url);this.updateConnectionStatus('connecting');this.socket.onopen=event=>{console.log('WebSocket Connected',event);this.reconnectAttempts=0;this.reconnectDelay=1000;this.updateConnectionStatus('connected');resolve();};// Add error handler for WebSocket constructor\nthis.socket.onerror=error=>{console.error('WebSocket connection error:',error);this.updateConnectionStatus('error');reject(new Error('Failed to connect to WebSocket'));};this.socket.onmessage=event=>{try{const message=JSON.parse(event.data);console.debug('WebSocket message received:',message.type,message);this.notifyHandlers(message);}catch(error){console.error('Error parsing WebSocket message:',error,event.data);}};this.socket.onclose=event=>{console.log('WebSocket Disconnected',event);this.updateConnectionStatus('disconnected');this.attemptReconnect(url);};this.socket.onerror=error=>{console.error('WebSocket Error:',error);this.updateConnectionStatus('error');this.socket.close();reject(error);};}catch(error){console.error('WebSocket Connection Error:',error);reject(error);}});}updateConnectionStatus(status){this.connectionStatus=status;this.notifyStatusChange(status);}onStatusChange(callback){this.connectionStatusListeners.add(callback);return()=>this.connectionStatusListeners.delete(callback);}notifyStatusChange(status){this.connectionStatusListeners.forEach(callback=>{try{callback(status);}catch(error){console.error('Error in status change handler:',error);}});}getStatus(){return this.connectionStatus;}attemptReconnect(url){if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;const delay=Math.min(this.reconnectDelay*Math.pow(2,this.reconnectAttempts-1),this.maxReconnectDelay);console.log(\"Attempting to reconnect in \".concat(delay,\"ms... (Attempt \").concat(this.reconnectAttempts,\"/\").concat(this.maxReconnectAttempts,\")\"));this.updateConnectionStatus('reconnecting');setTimeout(()=>{this.connect(url).catch(console.error);},delay);}else{console.error('Max reconnection attempts reached');this.updateConnectionStatus('disconnected');this.notifyHandlers({type:'connection/error',payload:'Max reconnection attempts reached'});}}disconnect(){if(this.socket){this.socket.close();this.socket=null;}this.messageHandlers.clear();}sendMessage(message){if(this.socket&&this.socket.readyState===WebSocket.OPEN){this.socket.send(JSON.stringify(message));return true;}console.warn('WebSocket is not connected');return false;}addMessageHandler(handler){this.messageHandlers.add(handler);return()=>this.messageHandlers.delete(handler);}removeMessageHandler(handler){this.messageHandlers.delete(handler);}notifyHandlers(message){this.messageHandlers.forEach(handler=>{try{handler(message);}catch(error){console.error('Error in message handler:',error);}});}// Network capture specific methods\nstartCapture(interfaceName){return this.sendMessage({type:'start_capture',interface:interfaceName});}stopCapture(){return this.sendMessage({type:'stop_capture'});}setFilter(filter){return this.sendMessage({type:'set_filter',filter:filter});}getInterfaces(){return this.sendMessage({type:'get_interfaces'});}getPackets(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:100;let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return this.sendMessage({type:'get_packets',limit,filters});}getStats(){return this.sendMessage({type:'get_stats'});}getBandwidth(){return this.sendMessage({type:'get_bandwidth'});}}// Export a singleton instance\nexport const webSocketService=new WebSocketService();// Helper hook for React components\nexport const useWebSocket=function(onMessage){let dependencies=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];const[isConnected,setIsConnected]=React.useState(false);const[error,setError]=React.useState(null);React.useEffect(()=>{const handleMessage=message=>{if(message.type==='connection/established'){setIsConnected(true);setError(null);}else if(message.type==='connection/error'){setError(message.payload);}if(onMessage){onMessage(message);}};// Add the handler\nconst removeHandler=webSocketService.addMessageHandler(handleMessage);// Clean up\nreturn()=>{removeHandler();};},[onMessage,...dependencies]);return{isConnected,error,sendMessage:webSocketService.sendMessage.bind(webSocketService),startCapture:webSocketService.startCapture.bind(webSocketService),stopCapture:webSocketService.stopCapture.bind(webSocketService),setFilter:webSocketService.setFilter.bind(webSocketService)};};","map":{"version":3,"names":["WebSocketService","constructor","socket","messageHandlers","Set","reconnectAttempts","maxReconnectAttempts","reconnectDelay","maxReconnectDelay","connectionStatus","connectionStatusListeners","connect","url","Promise","resolve","reject","readyState","WebSocket","OPEN","CONNECTING","console","log","close","concat","updateConnectionStatus","onopen","event","onerror","error","Error","onmessage","message","JSON","parse","data","debug","type","notifyHandlers","onclose","attemptReconnect","status","notifyStatusChange","onStatusChange","callback","add","delete","forEach","getStatus","delay","Math","min","pow","setTimeout","catch","payload","disconnect","clear","sendMessage","send","stringify","warn","addMessageHandler","handler","removeMessageHandler","startCapture","interfaceName","interface","stopCapture","setFilter","filter","getInterfaces","getPackets","limit","arguments","length","undefined","filters","getStats","getBandwidth","webSocketService","useWebSocket","onMessage","dependencies","isConnected","setIsConnected","React","useState","setError","useEffect","handleMessage","removeHandler","bind"],"sources":["C:/Users/Akshita/OneDrive - somaiya.edu/Akshita/Projects/SentinelAi/frontend/src/services/websocketService.js"],"sourcesContent":["class WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = new Set();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000; // Start with 1 second\n    this.maxReconnectDelay = 10000; // Max 10 seconds\n    this.connectionStatus = 'disconnected';\n    this.connectionStatusListeners = new Set();\n  }\n\n  connect(url) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Close existing connection if any\n        if (this.socket) {\n          if (this.socket.readyState === WebSocket.OPEN || this.socket.readyState === WebSocket.CONNECTING) {\n            console.log('Closing existing WebSocket connection');\n            this.socket.close();\n          }\n          this.socket = null;\n        }\n\n        console.log(`Connecting to WebSocket at ${url}`);\n        this.socket = new WebSocket(url);\n        this.updateConnectionStatus('connecting');\n\n        this.socket.onopen = (event) => {\n          console.log('WebSocket Connected', event);\n          this.reconnectAttempts = 0;\n          this.reconnectDelay = 1000;\n          this.updateConnectionStatus('connected');\n          resolve();\n        };\n        \n        // Add error handler for WebSocket constructor\n        this.socket.onerror = (error) => {\n          console.error('WebSocket connection error:', error);\n          this.updateConnectionStatus('error');\n          reject(new Error('Failed to connect to WebSocket'));\n        };\n\n        this.socket.onmessage = (event) => {\n          try {\n            const message = JSON.parse(event.data);\n            console.debug('WebSocket message received:', message.type, message);\n            this.notifyHandlers(message);\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error, event.data);\n          }\n        };\n\n        this.socket.onclose = (event) => {\n          console.log('WebSocket Disconnected', event);\n          this.updateConnectionStatus('disconnected');\n          this.attemptReconnect(url);\n        };\n\n        this.socket.onerror = (error) => {\n          console.error('WebSocket Error:', error);\n          this.updateConnectionStatus('error');\n          this.socket.close();\n          reject(error);\n        };\n      } catch (error) {\n        console.error('WebSocket Connection Error:', error);\n        reject(error);\n      }\n    });\n  }\n\n  updateConnectionStatus(status) {\n    this.connectionStatus = status;\n    this.notifyStatusChange(status);\n  }\n\n  onStatusChange(callback) {\n    this.connectionStatusListeners.add(callback);\n    return () => this.connectionStatusListeners.delete(callback);\n  }\n\n  notifyStatusChange(status) {\n    this.connectionStatusListeners.forEach(callback => {\n      try {\n        callback(status);\n      } catch (error) {\n        console.error('Error in status change handler:', error);\n      }\n    });\n  }\n\n  getStatus() {\n    return this.connectionStatus;\n  }\n\n  attemptReconnect(url) {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = Math.min(this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1), this.maxReconnectDelay);\n      \n      console.log(`Attempting to reconnect in ${delay}ms... (Attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      this.updateConnectionStatus('reconnecting');\n      \n      setTimeout(() => {\n        this.connect(url).catch(console.error);\n      }, delay);\n    } else {\n      console.error('Max reconnection attempts reached');\n      this.updateConnectionStatus('disconnected');\n      this.notifyHandlers({ type: 'connection/error', payload: 'Max reconnection attempts reached' });\n    }\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.messageHandlers.clear();\n  }\n\n  sendMessage(message) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(message));\n      return true;\n    }\n    console.warn('WebSocket is not connected');\n    return false;\n  }\n\n  addMessageHandler(handler) {\n    this.messageHandlers.add(handler);\n    return () => this.messageHandlers.delete(handler);\n  }\n\n  removeMessageHandler(handler) {\n    this.messageHandlers.delete(handler);\n  }\n\n  notifyHandlers(message) {\n    this.messageHandlers.forEach(handler => {\n      try {\n        handler(message);\n      } catch (error) {\n        console.error('Error in message handler:', error);\n      }\n    });\n  }\n\n  // Network capture specific methods\n  startCapture(interfaceName) {\n    return this.sendMessage({\n      type: 'start_capture',\n      interface: interfaceName\n    });\n  }\n\n  stopCapture() {\n    return this.sendMessage({\n      type: 'stop_capture'\n    });\n  }\n\n  setFilter(filter) {\n    return this.sendMessage({\n      type: 'set_filter',\n      filter: filter\n    });\n  }\n\n  getInterfaces() {\n    return this.sendMessage({\n      type: 'get_interfaces'\n    });\n  }\n\n  getPackets(limit = 100, filters = {}) {\n    return this.sendMessage({\n      type: 'get_packets',\n      limit,\n      filters\n    });\n  }\n\n  getStats() {\n    return this.sendMessage({\n      type: 'get_stats'\n    });\n  }\n\n  getBandwidth() {\n    return this.sendMessage({\n      type: 'get_bandwidth'\n    });\n  }\n}\n\n// Export a singleton instance\nexport const webSocketService = new WebSocketService();\n\n// Helper hook for React components\nexport const useWebSocket = (onMessage, dependencies = []) => {\n  const [isConnected, setIsConnected] = React.useState(false);\n  const [error, setError] = React.useState(null);\n\n  React.useEffect(() => {\n    const handleMessage = (message) => {\n      if (message.type === 'connection/established') {\n        setIsConnected(true);\n        setError(null);\n      } else if (message.type === 'connection/error') {\n        setError(message.payload);\n      }\n      \n      if (onMessage) {\n        onMessage(message);\n      }\n    };\n\n    // Add the handler\n    const removeHandler = webSocketService.addMessageHandler(handleMessage);\n\n    // Clean up\n    return () => {\n      removeHandler();\n    };\n  }, [onMessage, ...dependencies]);\n\n  return {\n    isConnected,\n    error,\n    sendMessage: webSocketService.sendMessage.bind(webSocketService),\n    startCapture: webSocketService.startCapture.bind(webSocketService),\n    stopCapture: webSocketService.stopCapture.bind(webSocketService),\n    setFilter: webSocketService.setFilter.bind(webSocketService)\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}