{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Mock API calls\nconst fetchModelStatus = async () => {\n  // In a real app, this would be an API call\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        status: 'trained',\n        accuracy: 0.98,\n        precision: 0.97,\n        recall: 0.96,\n        f1Score: 0.965,\n        lastTrained: '2023-08-01T10:30:00Z'\n      });\n    }, 500);\n  });\n};\nconst initialState = {\n  status: 'idle',\n  trainingStatus: 'idle',\n  error: null,\n  currentModel: null,\n  availableModels: [],\n  metrics: {\n    accuracy: 0,\n    precision: 0,\n    recall: 0,\n    f1Score: 0,\n    confusionMatrix: {\n      truePositives: 0,\n      trueNegatives: 0,\n      falsePositives: 0,\n      falseNegatives: 0\n    }\n  },\n  trainingHistory: [],\n  datasets: [],\n  selectedDataset: null,\n  trainingProgress: 0\n};\nexport const fetchModelStatusAsync = createAsyncThunk('model/fetchStatus', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const status = await fetchModelStatus();\n    return status;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst modelSlice = createSlice({\n  name: 'model',\n  initialState,\n  reducers: {\n    startTraining(state) {\n      state.trainingStatus = 'training';\n      state.trainingProgress = 0;\n    },\n    updateTrainingProgress(state, action) {\n      state.trainingProgress = action.payload;\n    },\n    trainingComplete(state, action) {\n      state.trainingStatus = 'succeeded';\n      state.metrics = action.payload.metrics;\n      state.currentModel = action.payload.model;\n      state.trainingHistory.unshift({\n        timestamp: new Date().toISOString(),\n        metrics: action.payload.metrics\n      });\n    },\n    trainingFailed(state, action) {\n      state.trainingStatus = 'failed';\n      state.error = action.payload;\n    },\n    selectModel(state, action) {\n      state.currentModel = action.payload;\n    },\n    selectDataset(state, action) {\n      state.selectedDataset = action.payload;\n    },\n    resetTrainingState(state) {\n      state.trainingStatus = 'idle';\n      state.error = null;\n      state.trainingProgress = 0;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchModelStatusAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchModelStatusAsync.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.metrics = {\n        ...state.metrics,\n        accuracy: action.payload.accuracy,\n        precision: action.payload.precision,\n        recall: action.payload.recall,\n        f1Score: action.payload.f1Score\n      };\n      state.currentModel = {\n        ...state.currentModel,\n        lastTrained: action.payload.lastTrained,\n        status: action.payload.status\n      };\n    }).addCase(fetchModelStatusAsync.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  startTraining,\n  updateTrainingProgress,\n  trainingComplete,\n  trainingFailed,\n  selectModel,\n  selectDataset,\n  resetTrainingState\n} = modelSlice.actions;\nexport default modelSlice.reducer;\n\n// Selectors\nexport const selectModelStatus = state => state.model.status;\nexport const selectTrainingStatus = state => state.model.trainingStatus;\nexport const selectModelMetrics = state => state.model.metrics;\nexport const selectCurrentModel = state => state.model.currentModel;\nexport const selectTrainingProgress = state => state.model.trainingProgress;\nexport const selectSelectedDataset = state => state.model.selectedDataset;\nexport const selectAvailableDatasets = state => state.model.datasets;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchModelStatus","Promise","resolve","setTimeout","status","accuracy","precision","recall","f1Score","lastTrained","initialState","trainingStatus","error","currentModel","availableModels","metrics","confusionMatrix","truePositives","trueNegatives","falsePositives","falseNegatives","trainingHistory","datasets","selectedDataset","trainingProgress","fetchModelStatusAsync","_","rejectWithValue","message","modelSlice","name","reducers","startTraining","state","updateTrainingProgress","action","payload","trainingComplete","model","unshift","timestamp","Date","toISOString","trainingFailed","selectModel","selectDataset","resetTrainingState","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer","selectModelStatus","selectTrainingStatus","selectModelMetrics","selectCurrentModel","selectTrainingProgress","selectSelectedDataset","selectAvailableDatasets"],"sources":["C:/Users/Akshita/OneDrive - somaiya.edu/Akshita/Projects/SentinelAi/frontend/src/features/model/modelSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Mock API calls\nconst fetchModelStatus = async () => {\n  // In a real app, this would be an API call\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        status: 'trained',\n        accuracy: 0.98,\n        precision: 0.97,\n        recall: 0.96,\n        f1Score: 0.965,\n        lastTrained: '2023-08-01T10:30:00Z',\n      });\n    }, 500);\n  });\n};\n\nconst initialState = {\n  status: 'idle',\n  trainingStatus: 'idle',\n  error: null,\n  currentModel: null,\n  availableModels: [],\n  metrics: {\n    accuracy: 0,\n    precision: 0,\n    recall: 0,\n    f1Score: 0,\n    confusionMatrix: {\n      truePositives: 0,\n      trueNegatives: 0,\n      falsePositives: 0,\n      falseNegatives: 0,\n    },\n  },\n  trainingHistory: [],\n  datasets: [],\n  selectedDataset: null,\n  trainingProgress: 0,\n};\n\nexport const fetchModelStatusAsync = createAsyncThunk(\n  'model/fetchStatus',\n  async (_, { rejectWithValue }) => {\n    try {\n      const status = await fetchModelStatus();\n      return status;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nconst modelSlice = createSlice({\n  name: 'model',\n  initialState,\n  reducers: {\n    startTraining(state) {\n      state.trainingStatus = 'training';\n      state.trainingProgress = 0;\n    },\n    updateTrainingProgress(state, action) {\n      state.trainingProgress = action.payload;\n    },\n    trainingComplete(state, action) {\n      state.trainingStatus = 'succeeded';\n      state.metrics = action.payload.metrics;\n      state.currentModel = action.payload.model;\n      state.trainingHistory.unshift({\n        timestamp: new Date().toISOString(),\n        metrics: action.payload.metrics,\n      });\n    },\n    trainingFailed(state, action) {\n      state.trainingStatus = 'failed';\n      state.error = action.payload;\n    },\n    selectModel(state, action) {\n      state.currentModel = action.payload;\n    },\n    selectDataset(state, action) {\n      state.selectedDataset = action.payload;\n    },\n    resetTrainingState(state) {\n      state.trainingStatus = 'idle';\n      state.error = null;\n      state.trainingProgress = 0;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchModelStatusAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchModelStatusAsync.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.metrics = {\n          ...state.metrics,\n          accuracy: action.payload.accuracy,\n          precision: action.payload.precision,\n          recall: action.payload.recall,\n          f1Score: action.payload.f1Score,\n        };\n        state.currentModel = {\n          ...state.currentModel,\n          lastTrained: action.payload.lastTrained,\n          status: action.payload.status,\n        };\n      })\n      .addCase(fetchModelStatusAsync.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      });\n  },\n});\n\nexport const {\n  startTraining,\n  updateTrainingProgress,\n  trainingComplete,\n  trainingFailed,\n  selectModel,\n  selectDataset,\n  resetTrainingState,\n} = modelSlice.actions;\n\nexport default modelSlice.reducer;\n\n// Selectors\nexport const selectModelStatus = (state) => state.model.status;\nexport const selectTrainingStatus = (state) => state.model.trainingStatus;\nexport const selectModelMetrics = (state) => state.model.metrics;\nexport const selectCurrentModel = (state) => state.model.currentModel;\nexport const selectTrainingProgress = (state) => state.model.trainingProgress;\nexport const selectSelectedDataset = (state) => state.model.selectedDataset;\nexport const selectAvailableDatasets = (state) => state.model.datasets;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}