{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  status: 'idle',\n  error: null,\n  attacks: [],\n  stats: {\n    total: 0,\n    critical: 0,\n    high: 0,\n    medium: 0,\n    low: 0\n  },\n  attackTypes: {},\n  recentAttacks: [],\n  detectionRules: []\n};\nconst detectionSlice = createSlice({\n  name: 'detection',\n  initialState,\n  reducers: {\n    fetchAttacksStart(state) {\n      state.status = 'loading';\n    },\n    fetchAttacksSuccess(state, action) {\n      state.status = 'succeeded';\n      state.attacks = action.payload.attacks;\n      state.stats = action.payload.stats;\n      state.attackTypes = action.payload.attackTypes;\n      state.recentAttacks = action.payload.recentAttacks;\n    },\n    fetchAttacksFailure(state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    },\n    addDetectedAttack(state, action) {\n      const attack = action.payload;\n      state.recentAttacks = [attack, ...state.recentAttacks].slice(0, 50);\n\n      // Update attack type count\n      state.attackTypes[attack.type] = (state.attackTypes[attack.type] || 0) + 1;\n\n      // Update severity stats\n      state.stats.total += 1;\n      if (attack.severity === 'critical') state.stats.critical += 1;else if (attack.severity === 'high') state.stats.high += 1;else if (attack.severity === 'medium') state.stats.medium += 1;else state.stats.low += 1;\n    },\n    updateDetectionRules(state, action) {\n      state.detectionRules = action.payload;\n    }\n  }\n});\nexport const {\n  fetchAttacksStart,\n  fetchAttacksSuccess,\n  fetchAttacksFailure,\n  addDetectedAttack,\n  updateDetectionRules\n} = detectionSlice.actions;\nexport default detectionSlice.reducer;\n\n// Selectors\nexport const selectDetectionStatus = state => state.detection.status;\nexport const selectAttackStats = state => state.detection.stats;\nexport const selectAttackTypes = state => state.detection.attackTypes;\nexport const selectRecentAttacks = state => state.detection.recentAttacks;\nexport const selectDetectionRules = state => state.detection.detectionRules;","map":{"version":3,"names":["createSlice","initialState","status","error","attacks","stats","total","critical","high","medium","low","attackTypes","recentAttacks","detectionRules","detectionSlice","name","reducers","fetchAttacksStart","state","fetchAttacksSuccess","action","payload","fetchAttacksFailure","addDetectedAttack","attack","slice","type","severity","updateDetectionRules","actions","reducer","selectDetectionStatus","detection","selectAttackStats","selectAttackTypes","selectRecentAttacks","selectDetectionRules"],"sources":["C:/Users/Akshita/OneDrive - somaiya.edu/Akshita/Projects/SentinelAi/frontend/src/features/detection/detectionSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  status: 'idle',\n  error: null,\n  attacks: [],\n  stats: {\n    total: 0,\n    critical: 0,\n    high: 0,\n    medium: 0,\n    low: 0,\n  },\n  attackTypes: {},\n  recentAttacks: [],\n  detectionRules: [],\n};\n\nconst detectionSlice = createSlice({\n  name: 'detection',\n  initialState,\n  reducers: {\n    fetchAttacksStart(state) {\n      state.status = 'loading';\n    },\n    fetchAttacksSuccess(state, action) {\n      state.status = 'succeeded';\n      state.attacks = action.payload.attacks;\n      state.stats = action.payload.stats;\n      state.attackTypes = action.payload.attackTypes;\n      state.recentAttacks = action.payload.recentAttacks;\n    },\n    fetchAttacksFailure(state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    },\n    addDetectedAttack(state, action) {\n      const attack = action.payload;\n      state.recentAttacks = [attack, ...state.recentAttacks].slice(0, 50);\n      \n      // Update attack type count\n      state.attackTypes[attack.type] = (state.attackTypes[attack.type] || 0) + 1;\n      \n      // Update severity stats\n      state.stats.total += 1;\n      if (attack.severity === 'critical') state.stats.critical += 1;\n      else if (attack.severity === 'high') state.stats.high += 1;\n      else if (attack.severity === 'medium') state.stats.medium += 1;\n      else state.stats.low += 1;\n    },\n    updateDetectionRules(state, action) {\n      state.detectionRules = action.payload;\n    },\n  },\n});\n\nexport const {\n  fetchAttacksStart,\n  fetchAttacksSuccess,\n  fetchAttacksFailure,\n  addDetectedAttack,\n  updateDetectionRules,\n} = detectionSlice.actions;\n\nexport default detectionSlice.reducer;\n\n// Selectors\nexport const selectDetectionStatus = (state) => state.detection.status;\nexport const selectAttackStats = (state) => state.detection.stats;\nexport const selectAttackTypes = (state) => state.detection.attackTypes;\nexport const selectRecentAttacks = (state) => state.detection.recentAttacks;\nexport const selectDetectionRules = (state) => state.detection.detectionRules;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}