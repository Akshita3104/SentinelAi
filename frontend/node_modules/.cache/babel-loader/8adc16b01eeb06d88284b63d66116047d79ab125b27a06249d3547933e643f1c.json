{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  status: 'idle',\n  error: null,\n  topology: {\n    nodes: [],\n    links: []\n  },\n  trafficStats: {\n    total: 0,\n    allowed: 0,\n    blocked: 0,\n    suspicious: 0\n  },\n  bandwidthUsage: {\n    in: 0,\n    out: 0,\n    history: []\n  }\n};\nconst networkSlice = createSlice({\n  name: 'network',\n  initialState,\n  reducers: {\n    fetchTopologyStart(state) {\n      state.status = 'loading';\n    },\n    fetchTopologySuccess(state, action) {\n      state.status = 'succeeded';\n      state.topology = action.payload;\n    },\n    fetchTopologyFailure(state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    },\n    updateTrafficStats(state, action) {\n      state.trafficStats = {\n        ...state.trafficStats,\n        ...action.payload\n      };\n    },\n    updateBandwidthUsage(state, action) {\n      const {\n        in: inTraffic,\n        out: outTraffic\n      } = action.payload;\n      const now = new Date().toISOString();\n      state.bandwidthUsage = {\n        in: inTraffic,\n        out: outTraffic,\n        history: [...state.bandwidthUsage.history.slice(-59), {\n          timestamp: now,\n          in: inTraffic,\n          out: outTraffic\n        }]\n      };\n    }\n  }\n});\nexport const {\n  fetchTopologyStart,\n  fetchTopologySuccess,\n  fetchTopologyFailure,\n  updateTrafficStats,\n  updateBandwidthUsage\n} = networkSlice.actions;\nexport default networkSlice.reducer;\nexport const selectNetworkStatus = state => state.network.status;\nexport const selectTopology = state => state.network.topology;\nexport const selectTrafficStats = state => state.network.trafficStats;\nexport const selectBandwidthUsage = state => state.network.bandwidthUsage;","map":{"version":3,"names":["createSlice","initialState","status","error","topology","nodes","links","trafficStats","total","allowed","blocked","suspicious","bandwidthUsage","in","out","history","networkSlice","name","reducers","fetchTopologyStart","state","fetchTopologySuccess","action","payload","fetchTopologyFailure","updateTrafficStats","updateBandwidthUsage","inTraffic","outTraffic","now","Date","toISOString","slice","timestamp","actions","reducer","selectNetworkStatus","network","selectTopology","selectTrafficStats","selectBandwidthUsage"],"sources":["C:/Users/Akshita/OneDrive - somaiya.edu/Akshita/Projects/SentinelAi/frontend/src/features/network/networkSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  status: 'idle',\n  error: null,\n  topology: {\n    nodes: [],\n    links: [],\n  },\n  trafficStats: {\n    total: 0,\n    allowed: 0,\n    blocked: 0,\n    suspicious: 0,\n  },\n  bandwidthUsage: {\n    in: 0,\n    out: 0,\n    history: [],\n  },\n};\n\nconst networkSlice = createSlice({\n  name: 'network',\n  initialState,\n  reducers: {\n    fetchTopologyStart(state) {\n      state.status = 'loading';\n    },\n    fetchTopologySuccess(state, action) {\n      state.status = 'succeeded';\n      state.topology = action.payload;\n    },\n    fetchTopologyFailure(state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    },\n    updateTrafficStats(state, action) {\n      state.trafficStats = {\n        ...state.trafficStats,\n        ...action.payload,\n      };\n    },\n    updateBandwidthUsage(state, action) {\n      const { in: inTraffic, out: outTraffic } = action.payload;\n      const now = new Date().toISOString();\n      \n      state.bandwidthUsage = {\n        in: inTraffic,\n        out: outTraffic,\n        history: [\n          ...state.bandwidthUsage.history.slice(-59),\n          { timestamp: now, in: inTraffic, out: outTraffic },\n        ],\n      };\n    },\n  },\n});\n\nexport const {\n  fetchTopologyStart,\n  fetchTopologySuccess,\n  fetchTopologyFailure,\n  updateTrafficStats,\n  updateBandwidthUsage,\n} = networkSlice.actions;\n\nexport default networkSlice.reducer;\n\nexport const selectNetworkStatus = (state) => state.network.status;\nexport const selectTopology = (state) => state.network.topology;\nexport const selectTrafficStats = (state) => state.network.trafficStats;\nexport const selectBandwidthUsage = (state) => state.network.bandwidthUsage;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC;EACDC,YAAY,EAAE;IACZC,KAAK,EAAE,CAAC;IACRC,OAAO,EAAE,CAAC;IACVC,OAAO,EAAE,CAAC;IACVC,UAAU,EAAE;EACd,CAAC;EACDC,cAAc,EAAE;IACdC,EAAE,EAAE,CAAC;IACLC,GAAG,EAAE,CAAC;IACNC,OAAO,EAAE;EACX;AACF,CAAC;AAED,MAAMC,YAAY,GAAGhB,WAAW,CAAC;EAC/BiB,IAAI,EAAE,SAAS;EACfhB,YAAY;EACZiB,QAAQ,EAAE;IACRC,kBAAkBA,CAACC,KAAK,EAAE;MACxBA,KAAK,CAAClB,MAAM,GAAG,SAAS;IAC1B,CAAC;IACDmB,oBAAoBA,CAACD,KAAK,EAAEE,MAAM,EAAE;MAClCF,KAAK,CAAClB,MAAM,GAAG,WAAW;MAC1BkB,KAAK,CAAChB,QAAQ,GAAGkB,MAAM,CAACC,OAAO;IACjC,CAAC;IACDC,oBAAoBA,CAACJ,KAAK,EAAEE,MAAM,EAAE;MAClCF,KAAK,CAAClB,MAAM,GAAG,QAAQ;MACvBkB,KAAK,CAACjB,KAAK,GAAGmB,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDE,kBAAkBA,CAACL,KAAK,EAAEE,MAAM,EAAE;MAChCF,KAAK,CAACb,YAAY,GAAG;QACnB,GAAGa,KAAK,CAACb,YAAY;QACrB,GAAGe,MAAM,CAACC;MACZ,CAAC;IACH,CAAC;IACDG,oBAAoBA,CAACN,KAAK,EAAEE,MAAM,EAAE;MAClC,MAAM;QAAET,EAAE,EAAEc,SAAS;QAAEb,GAAG,EAAEc;MAAW,CAAC,GAAGN,MAAM,CAACC,OAAO;MACzD,MAAMM,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAEpCX,KAAK,CAACR,cAAc,GAAG;QACrBC,EAAE,EAAEc,SAAS;QACbb,GAAG,EAAEc,UAAU;QACfb,OAAO,EAAE,CACP,GAAGK,KAAK,CAACR,cAAc,CAACG,OAAO,CAACiB,KAAK,CAAC,CAAC,EAAE,CAAC,EAC1C;UAAEC,SAAS,EAAEJ,GAAG;UAAEhB,EAAE,EAAEc,SAAS;UAAEb,GAAG,EAAEc;QAAW,CAAC;MAEtD,CAAC;IACH;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXT,kBAAkB;EAClBE,oBAAoB;EACpBG,oBAAoB;EACpBC,kBAAkB;EAClBC;AACF,CAAC,GAAGV,YAAY,CAACkB,OAAO;AAExB,eAAelB,YAAY,CAACmB,OAAO;AAEnC,OAAO,MAAMC,mBAAmB,GAAIhB,KAAK,IAAKA,KAAK,CAACiB,OAAO,CAACnC,MAAM;AAClE,OAAO,MAAMoC,cAAc,GAAIlB,KAAK,IAAKA,KAAK,CAACiB,OAAO,CAACjC,QAAQ;AAC/D,OAAO,MAAMmC,kBAAkB,GAAInB,KAAK,IAAKA,KAAK,CAACiB,OAAO,CAAC9B,YAAY;AACvE,OAAO,MAAMiC,oBAAoB,GAAIpB,KAAK,IAAKA,KAAK,CAACiB,OAAO,CAACzB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}