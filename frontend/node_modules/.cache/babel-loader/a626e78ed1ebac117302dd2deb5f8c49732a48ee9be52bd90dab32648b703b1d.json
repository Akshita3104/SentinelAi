{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport networkReducer from '../features/network/networkSlice';\nimport websocketMiddleware from '../middleware/websocketMiddleware';\n\n// Configure the Redux store with middleware\nconst store = configureStore({\n  reducer: {\n    network: networkReducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      // Ignore these action types\n      ignoredActions: ['network/updateCaptureStatus', 'network/addPacket', 'network/updateStats', 'network/updateBandwidth', 'network/updateInterfaces'],\n      // Ignore these field paths in all actions\n      ignoredActionPaths: ['meta.arg', 'payload.timestamp'],\n      // Ignore these paths in the state\n      ignoredPaths: ['network.packets', 'network.stats', 'network.bandwidth', 'network.interfaces']\n    }\n  }).concat(websocketMiddleware)\n});\n\n// Initialize WebSocket service with store's dispatch\nstore.dispatch({\n  type: 'websocket/init'\n});\n\n// Connect to WebSocket endpoint\nconst wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8080';\nstore.dispatch({\n  type: 'websocket/connect',\n  payload: {\n    url: wsUrl\n  }\n});\nexport default store;","map":{"version":3,"names":["configureStore","networkReducer","websocketMiddleware","store","reducer","network","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","ignoredActionPaths","ignoredPaths","concat","dispatch","type","wsUrl","process","env","REACT_APP_WS_URL","payload","url"],"sources":["C:/Users/Akshita/OneDrive - somaiya.edu/Akshita/Projects/SentinelAi/frontend/src/app/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport networkReducer from '../features/network/networkSlice';\nimport websocketMiddleware from '../middleware/websocketMiddleware';\n\n// Configure the Redux store with middleware\nconst store = configureStore({\n  reducer: {\n    network: networkReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        // Ignore these action types\n        ignoredActions: [\n          'network/updateCaptureStatus',\n          'network/addPacket',\n          'network/updateStats',\n          'network/updateBandwidth',\n          'network/updateInterfaces'\n        ],\n        // Ignore these field paths in all actions\n        ignoredActionPaths: ['meta.arg', 'payload.timestamp'],\n        // Ignore these paths in the state\n        ignoredPaths: [\n          'network.packets',\n          'network.stats',\n          'network.bandwidth',\n          'network.interfaces'\n        ],\n      },\n    }).concat(websocketMiddleware)\n});\n\n// Initialize WebSocket service with store's dispatch\nstore.dispatch({ type: 'websocket/init' });\n\n// Connect to WebSocket endpoint\nconst wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8080';\nstore.dispatch({\n  type: 'websocket/connect',\n  payload: { url: wsUrl }\n});\n\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,cAAc,MAAM,kCAAkC;AAC7D,OAAOC,mBAAmB,MAAM,mCAAmC;;AAEnE;AACA,MAAMC,KAAK,GAAGH,cAAc,CAAC;EAC3BI,OAAO,EAAE;IACPC,OAAO,EAAEJ;EACX,CAAC;EACDK,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjB;MACAC,cAAc,EAAE,CACd,6BAA6B,EAC7B,mBAAmB,EACnB,qBAAqB,EACrB,yBAAyB,EACzB,0BAA0B,CAC3B;MACD;MACAC,kBAAkB,EAAE,CAAC,UAAU,EAAE,mBAAmB,CAAC;MACrD;MACAC,YAAY,EAAE,CACZ,iBAAiB,EACjB,eAAe,EACf,mBAAmB,EACnB,oBAAoB;IAExB;EACF,CAAC,CAAC,CAACC,MAAM,CAACV,mBAAmB;AACjC,CAAC,CAAC;;AAEF;AACAC,KAAK,CAACU,QAAQ,CAAC;EAAEC,IAAI,EAAE;AAAiB,CAAC,CAAC;;AAE1C;AACA,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,gBAAgB,IAAI,qBAAqB;AACnEf,KAAK,CAACU,QAAQ,CAAC;EACbC,IAAI,EAAE,mBAAmB;EACzBK,OAAO,EAAE;IAAEC,GAAG,EAAEL;EAAM;AACxB,CAAC,CAAC;AAEF,eAAeZ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}