{"ast":null,"code":"var _s = $RefreshSig$();\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = new Set();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000; // Start with 1 second\n    this.maxReconnectDelay = 10000; // Max 10 seconds\n  }\n  connect(url) {\n    return new Promise((resolve, reject) => {\n      try {\n        this.socket = new WebSocket(url);\n        this.socket.onopen = () => {\n          console.log('WebSocket Connected');\n          this.reconnectAttempts = 0;\n          this.reconnectDelay = 1000;\n          resolve();\n        };\n        this.socket.onmessage = event => {\n          try {\n            const message = JSON.parse(event.data);\n            this.notifyHandlers(message);\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n        this.socket.onclose = event => {\n          console.log('WebSocket Disconnected', event);\n          this.attemptReconnect(url);\n        };\n        this.socket.onerror = error => {\n          console.error('WebSocket Error:', error);\n          this.socket.close();\n          reject(error);\n        };\n      } catch (error) {\n        console.error('WebSocket Connection Error:', error);\n        reject(error);\n      }\n    });\n  }\n  attemptReconnect(url) {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = Math.min(this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1), this.maxReconnectDelay);\n      console.log(`Attempting to reconnect in ${delay}ms... (Attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      setTimeout(() => {\n        this.connect(url).catch(console.error);\n      }, delay);\n    } else {\n      console.error('Max reconnection attempts reached');\n      this.notifyHandlers({\n        type: 'connection/error',\n        payload: 'Max reconnection attempts reached'\n      });\n    }\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.messageHandlers.clear();\n  }\n  sendMessage(message) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(message));\n      return true;\n    }\n    console.warn('WebSocket is not connected');\n    return false;\n  }\n  addMessageHandler(handler) {\n    this.messageHandlers.add(handler);\n    return () => this.messageHandlers.delete(handler);\n  }\n  removeMessageHandler(handler) {\n    this.messageHandlers.delete(handler);\n  }\n  notifyHandlers(message) {\n    this.messageHandlers.forEach(handler => {\n      try {\n        handler(message);\n      } catch (error) {\n        console.error('Error in message handler:', error);\n      }\n    });\n  }\n\n  // Network capture specific methods\n  startCapture(interfaceName) {\n    return this.sendMessage({\n      type: 'capture/start',\n      payload: {\n        interface: interfaceName\n      }\n    });\n  }\n  stopCapture() {\n    return this.sendMessage({\n      type: 'capture/stop'\n    });\n  }\n  setFilter(filter) {\n    return this.sendMessage({\n      type: 'capture/filter',\n      payload: filter\n    });\n  }\n}\n\n// Export a singleton instance\nexport const webSocketService = new WebSocketService();\n\n// Helper hook for React components\nexport const useWebSocket = (onMessage, dependencies = []) => {\n  _s();\n  const [isConnected, setIsConnected] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  React.useEffect(() => {\n    const handleMessage = message => {\n      if (message.type === 'connection/established') {\n        setIsConnected(true);\n        setError(null);\n      } else if (message.type === 'connection/error') {\n        setError(message.payload);\n      }\n      if (onMessage) {\n        onMessage(message);\n      }\n    };\n\n    // Add the handler\n    const removeHandler = webSocketService.addMessageHandler(handleMessage);\n\n    // Clean up\n    return () => {\n      removeHandler();\n    };\n  }, [onMessage, ...dependencies]);\n  return {\n    isConnected,\n    error,\n    sendMessage: webSocketService.sendMessage.bind(webSocketService),\n    startCapture: webSocketService.startCapture.bind(webSocketService),\n    stopCapture: webSocketService.stopCapture.bind(webSocketService),\n    setFilter: webSocketService.setFilter.bind(webSocketService)\n  };\n};\n_s(useWebSocket, \"pC3TVIB/x3LrkaCp5yIVZyn0G4I=\");","map":{"version":3,"names":["WebSocketService","constructor","socket","messageHandlers","Set","reconnectAttempts","maxReconnectAttempts","reconnectDelay","maxReconnectDelay","connect","url","Promise","resolve","reject","WebSocket","onopen","console","log","onmessage","event","message","JSON","parse","data","notifyHandlers","error","onclose","attemptReconnect","onerror","close","delay","Math","min","pow","setTimeout","catch","type","payload","disconnect","clear","sendMessage","readyState","OPEN","send","stringify","warn","addMessageHandler","handler","add","delete","removeMessageHandler","forEach","startCapture","interfaceName","interface","stopCapture","setFilter","filter","webSocketService","useWebSocket","onMessage","dependencies","_s","isConnected","setIsConnected","React","useState","setError","useEffect","handleMessage","removeHandler","bind"],"sources":["C:/Users/Akshita/OneDrive - somaiya.edu/Akshita/Projects/SentinelAi/frontend/src/services/websocketService.js"],"sourcesContent":["class WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = new Set();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000; // Start with 1 second\n    this.maxReconnectDelay = 10000; // Max 10 seconds\n  }\n\n  connect(url) {\n    return new Promise((resolve, reject) => {\n      try {\n        this.socket = new WebSocket(url);\n\n        this.socket.onopen = () => {\n          console.log('WebSocket Connected');\n          this.reconnectAttempts = 0;\n          this.reconnectDelay = 1000;\n          resolve();\n        };\n\n        this.socket.onmessage = (event) => {\n          try {\n            const message = JSON.parse(event.data);\n            this.notifyHandlers(message);\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n\n        this.socket.onclose = (event) => {\n          console.log('WebSocket Disconnected', event);\n          this.attemptReconnect(url);\n        };\n\n        this.socket.onerror = (error) => {\n          console.error('WebSocket Error:', error);\n          this.socket.close();\n          reject(error);\n        };\n      } catch (error) {\n        console.error('WebSocket Connection Error:', error);\n        reject(error);\n      }\n    });\n  }\n\n  attemptReconnect(url) {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = Math.min(this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1), this.maxReconnectDelay);\n      \n      console.log(`Attempting to reconnect in ${delay}ms... (Attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      \n      setTimeout(() => {\n        this.connect(url).catch(console.error);\n      }, delay);\n    } else {\n      console.error('Max reconnection attempts reached');\n      this.notifyHandlers({ type: 'connection/error', payload: 'Max reconnection attempts reached' });\n    }\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.messageHandlers.clear();\n  }\n\n  sendMessage(message) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(message));\n      return true;\n    }\n    console.warn('WebSocket is not connected');\n    return false;\n  }\n\n  addMessageHandler(handler) {\n    this.messageHandlers.add(handler);\n    return () => this.messageHandlers.delete(handler);\n  }\n\n  removeMessageHandler(handler) {\n    this.messageHandlers.delete(handler);\n  }\n\n  notifyHandlers(message) {\n    this.messageHandlers.forEach(handler => {\n      try {\n        handler(message);\n      } catch (error) {\n        console.error('Error in message handler:', error);\n      }\n    });\n  }\n\n  // Network capture specific methods\n  startCapture(interfaceName) {\n    return this.sendMessage({\n      type: 'capture/start',\n      payload: { interface: interfaceName }\n    });\n  }\n\n  stopCapture() {\n    return this.sendMessage({\n      type: 'capture/stop'\n    });\n  }\n\n  setFilter(filter) {\n    return this.sendMessage({\n      type: 'capture/filter',\n      payload: filter\n    });\n  }\n}\n\n// Export a singleton instance\nexport const webSocketService = new WebSocketService();\n\n// Helper hook for React components\nexport const useWebSocket = (onMessage, dependencies = []) => {\n  const [isConnected, setIsConnected] = React.useState(false);\n  const [error, setError] = React.useState(null);\n\n  React.useEffect(() => {\n    const handleMessage = (message) => {\n      if (message.type === 'connection/established') {\n        setIsConnected(true);\n        setError(null);\n      } else if (message.type === 'connection/error') {\n        setError(message.payload);\n      }\n      \n      if (onMessage) {\n        onMessage(message);\n      }\n    };\n\n    // Add the handler\n    const removeHandler = webSocketService.addMessageHandler(handleMessage);\n\n    // Clean up\n    return () => {\n      removeHandler();\n    };\n  }, [onMessage, ...dependencies]);\n\n  return {\n    isConnected,\n    error,\n    sendMessage: webSocketService.sendMessage.bind(webSocketService),\n    startCapture: webSocketService.startCapture.bind(webSocketService),\n    stopCapture: webSocketService.stopCapture.bind(webSocketService),\n    setFilter: webSocketService.setFilter.bind(webSocketService)\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}