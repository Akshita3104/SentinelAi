{"ast":null,"code":"import { webSocketService } from '../services/websocketService';\nconst websocketMiddleware = store => next => action => {\n  // Initialize WebSocket service with store's dispatch\n  if (action.type === 'websocket/init') {\n    webSocketService.setDispatch(store.dispatch);\n    return next(action);\n  }\n\n  // Handle WebSocket connection actions\n  if (action.type === 'websocket/connect') {\n    const {\n      url\n    } = action.payload;\n    webSocketService.connect(url).then(() => {\n      console.log('WebSocket connected successfully');\n    }).catch(error => {\n      console.error('WebSocket connection failed:', error);\n      store.dispatch({\n        type: 'network/updateCaptureStatus',\n        payload: {\n          status: 'error',\n          error: error.message || 'Failed to connect to WebSocket'\n        }\n      });\n    });\n    return next(action);\n  }\n\n  // Handle WebSocket disconnection\n  if (action.type === 'websocket/disconnect') {\n    webSocketService.disconnect();\n    return next(action);\n  }\n\n  // Handle sending messages through WebSocket\n  if (action.type === 'websocket/send') {\n    const {\n      message\n    } = action.payload;\n    webSocketService.send(message);\n    return next(action);\n  }\n  return next(action);\n};\nexport default websocketMiddleware;","map":{"version":3,"names":["webSocketService","websocketMiddleware","store","next","action","type","setDispatch","dispatch","url","payload","connect","then","console","log","catch","error","status","message","disconnect","send"],"sources":["C:/Users/Akshita/OneDrive - somaiya.edu/Akshita/Projects/SentinelAi/frontend/src/middleware/websocketMiddleware.js"],"sourcesContent":["import { webSocketService } from '../services/websocketService';\n\nconst websocketMiddleware = store => next => action => {\n  // Initialize WebSocket service with store's dispatch\n  if (action.type === 'websocket/init') {\n    webSocketService.setDispatch(store.dispatch);\n    return next(action);\n  }\n  \n  // Handle WebSocket connection actions\n  if (action.type === 'websocket/connect') {\n    const { url } = action.payload;\n    webSocketService.connect(url)\n      .then(() => {\n        console.log('WebSocket connected successfully');\n      })\n      .catch(error => {\n        console.error('WebSocket connection failed:', error);\n        store.dispatch({\n          type: 'network/updateCaptureStatus',\n          payload: { \n            status: 'error',\n            error: error.message || 'Failed to connect to WebSocket'\n          }\n        });\n      });\n    return next(action);\n  }\n  \n  // Handle WebSocket disconnection\n  if (action.type === 'websocket/disconnect') {\n    webSocketService.disconnect();\n    return next(action);\n  }\n  \n  // Handle sending messages through WebSocket\n  if (action.type === 'websocket/send') {\n    const { message } = action.payload;\n    webSocketService.send(message);\n    return next(action);\n  }\n  \n  return next(action);\n};\n\nexport default websocketMiddleware;\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,8BAA8B;AAE/D,MAAMC,mBAAmB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;EACrD;EACA,IAAIA,MAAM,CAACC,IAAI,KAAK,gBAAgB,EAAE;IACpCL,gBAAgB,CAACM,WAAW,CAACJ,KAAK,CAACK,QAAQ,CAAC;IAC5C,OAAOJ,IAAI,CAACC,MAAM,CAAC;EACrB;;EAEA;EACA,IAAIA,MAAM,CAACC,IAAI,KAAK,mBAAmB,EAAE;IACvC,MAAM;MAAEG;IAAI,CAAC,GAAGJ,MAAM,CAACK,OAAO;IAC9BT,gBAAgB,CAACU,OAAO,CAACF,GAAG,CAAC,CAC1BG,IAAI,CAAC,MAAM;MACVC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IACjD,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDb,KAAK,CAACK,QAAQ,CAAC;QACbF,IAAI,EAAE,6BAA6B;QACnCI,OAAO,EAAE;UACPO,MAAM,EAAE,OAAO;UACfD,KAAK,EAAEA,KAAK,CAACE,OAAO,IAAI;QAC1B;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACJ,OAAOd,IAAI,CAACC,MAAM,CAAC;EACrB;;EAEA;EACA,IAAIA,MAAM,CAACC,IAAI,KAAK,sBAAsB,EAAE;IAC1CL,gBAAgB,CAACkB,UAAU,CAAC,CAAC;IAC7B,OAAOf,IAAI,CAACC,MAAM,CAAC;EACrB;;EAEA;EACA,IAAIA,MAAM,CAACC,IAAI,KAAK,gBAAgB,EAAE;IACpC,MAAM;MAAEY;IAAQ,CAAC,GAAGb,MAAM,CAACK,OAAO;IAClCT,gBAAgB,CAACmB,IAAI,CAACF,OAAO,CAAC;IAC9B,OAAOd,IAAI,CAACC,MAAM,CAAC;EACrB;EAEA,OAAOD,IAAI,CAACC,MAAM,CAAC;AACrB,CAAC;AAED,eAAeH,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}