{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = new Set();\n    this.errorHandlers = new Set();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000; // Start with 1 second\n    this.maxReconnectDelay = 10000; // Max 10 seconds\n    this.connectionStatus = 'disconnected';\n    this.connectionStatusListeners = new Set();\n    this.reconnectTimeout = null;\n    this.url = null;\n  }\n  connect(url) {\n    this.url = url;\n    return new Promise((resolve, reject) => {\n      try {\n        // Close existing connection if any\n        if (this.socket) {\n          this.disconnect();\n        }\n        console.log(`Connecting to WebSocket at ${url}`);\n        this.socket = new WebSocket(url);\n        this.updateConnectionStatus('connecting');\n        this.socket.onopen = event => {\n          console.log('WebSocket Connected', event);\n          this.reconnectAttempts = 0;\n          this.reconnectDelay = 1000;\n          this.updateConnectionStatus('connected');\n          resolve();\n        };\n        this.socket.onerror = error => {\n          console.error('WebSocket connection error:', error);\n          this.notifyErrorHandlers(error);\n          this.updateConnectionStatus('error');\n\n          // Only reject if this is the initial connection attempt\n          if (this.reconnectAttempts === 0) {\n            reject(new Error('Failed to connect to WebSocket'));\n          }\n        };\n        this.socket.onmessage = event => {\n          try {\n            this.notifyHandlers(event.data);\n          } catch (error) {\n            console.error('Error handling WebSocket message:', error, event.data);\n            this.notifyErrorHandlers(error);\n          }\n        };\n        this.socket.onclose = event => {\n          console.log('WebSocket Disconnected', event);\n          this.updateConnectionStatus('disconnected');\n\n          // Don't attempt to reconnect if the close was intentional\n          if (event.code !== 1000) {\n            this.attemptReconnect();\n          }\n        };\n        this.socket.onerror = error => {\n          console.error('WebSocket Error:', error);\n          this.updateConnectionStatus('error');\n          this.socket.close();\n          reject(error);\n        };\n      } catch (error) {\n        console.error('WebSocket Connection Error:', error);\n        reject(error);\n      }\n    });\n  }\n  updateConnectionStatus(status) {\n    this.connectionStatus = status;\n    this.notifyStatusChange(status);\n  }\n  onStatusChange(callback) {\n    this.connectionStatusListeners.add(callback);\n    return () => this.connectionStatusListeners.delete(callback);\n  }\n  notifyStatusChange(status) {\n    this.connectionStatusListeners.forEach(callback => {\n      try {\n        callback(status);\n      } catch (error) {\n        console.error('Error in status change handler:', error);\n      }\n    });\n  }\n  getStatus() {\n    return this.connectionStatus;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.messageHandlers.clear();\n  }\n  sendMessage(message) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(message));\n      return true;\n    }\n    console.error('WebSocket is not connected');\n    return false;\n  }\n  removeMessageHandler(handler) {\n    this.messageHandlers.delete(handler);\n  }\n  notifyHandlers(message) {\n    this.messageHandlers.forEach(handler => {\n      try {\n        handler(message);\n      } catch (error) {\n        console.error('Error in message handler:', error);\n        this.notifyErrorHandlers(error);\n      }\n    });\n  }\n  onError(handler) {\n    if (typeof handler === 'function') {\n      this.errorHandlers.add(handler);\n      return () => this.errorHandlers.delete(handler);\n    }\n    return () => {};\n  }\n  removeErrorHandler(handler) {\n    this.errorHandlers.delete(handler);\n  }\n  notifyErrorHandlers(error) {\n    this.errorHandlers.forEach(handler => {\n      try {\n        handler(error);\n      } catch (err) {\n        console.error('Error in error handler:', err);\n      }\n    });\n  }\n\n  // Network capture specific methods\n  startCapture(interfaceName) {\n    return this.sendMessage({\n      type: 'start_capture',\n      interface: interfaceName\n    });\n  }\n  stopCapture() {\n    return this.sendMessage({\n      type: 'stop_capture'\n    });\n  }\n  setFilter(filter) {\n    return this.sendMessage({\n      type: 'set_filter',\n      filter: filter\n    });\n  }\n  getInterfaces() {\n    return this.sendMessage({\n      type: 'get_interfaces'\n    });\n  }\n  getPackets(limit = 100, filters = {}) {\n    return this.sendMessage({\n      type: 'get_packets',\n      limit,\n      filters\n    });\n  }\n  getStats() {\n    return this.sendMessage({\n      type: 'get_stats'\n    });\n  }\n  getBandwidth() {\n    return this.sendMessage({\n      type: 'get_bandwidth'\n    });\n  }\n}\n\n// Export a singleton instance\nexport const webSocketService = new WebSocketService();\n\n// Helper hook for React components\nexport const useWebSocket = (onMessage, dependencies = []) => {\n  _s();\n  const [isConnected, setIsConnected] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  React.useEffect(() => {\n    const handleMessage = message => {\n      if (message.type === 'connection/established') {\n        setIsConnected(true);\n        setError(null);\n      } else if (message.type === 'connection/error') {\n        setError(message.payload);\n      }\n      if (onMessage) {\n        onMessage(message);\n      }\n    };\n\n    // Add the handler\n    const removeHandler = webSocketService.addMessageHandler(handleMessage);\n\n    // Clean up\n    return () => {\n      removeHandler();\n    };\n  }, [onMessage, ...dependencies]);\n  return {\n    isConnected,\n    error,\n    sendMessage: webSocketService.sendMessage.bind(webSocketService),\n    startCapture: webSocketService.startCapture.bind(webSocketService),\n    stopCapture: webSocketService.stopCapture.bind(webSocketService),\n    setFilter: webSocketService.setFilter.bind(webSocketService)\n  };\n};\n_s(useWebSocket, \"pC3TVIB/x3LrkaCp5yIVZyn0G4I=\");","map":{"version":3,"names":["React","WebSocketService","constructor","socket","messageHandlers","Set","errorHandlers","reconnectAttempts","maxReconnectAttempts","reconnectDelay","maxReconnectDelay","connectionStatus","connectionStatusListeners","reconnectTimeout","url","connect","Promise","resolve","reject","disconnect","console","log","WebSocket","updateConnectionStatus","onopen","event","onerror","error","notifyErrorHandlers","Error","onmessage","notifyHandlers","data","onclose","code","attemptReconnect","close","status","notifyStatusChange","onStatusChange","callback","add","delete","forEach","getStatus","clear","sendMessage","message","readyState","OPEN","send","JSON","stringify","removeMessageHandler","handler","onError","removeErrorHandler","err","startCapture","interfaceName","type","interface","stopCapture","setFilter","filter","getInterfaces","getPackets","limit","filters","getStats","getBandwidth","webSocketService","useWebSocket","onMessage","dependencies","_s","isConnected","setIsConnected","useState","setError","useEffect","handleMessage","payload","removeHandler","addMessageHandler","bind"],"sources":["C:/Users/Akshita/OneDrive - somaiya.edu/Akshita/Projects/SentinelAi/frontend/src/services/websocketService.js"],"sourcesContent":["import React from 'react';\n\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = new Set();\n    this.errorHandlers = new Set();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000; // Start with 1 second\n    this.maxReconnectDelay = 10000; // Max 10 seconds\n    this.connectionStatus = 'disconnected';\n    this.connectionStatusListeners = new Set();\n    this.reconnectTimeout = null;\n    this.url = null;\n  }\n\n  connect(url) {\n    this.url = url;\n    return new Promise((resolve, reject) => {\n      try {\n        // Close existing connection if any\n        if (this.socket) {\n          this.disconnect();\n        }\n\n        console.log(`Connecting to WebSocket at ${url}`);\n        this.socket = new WebSocket(url);\n        this.updateConnectionStatus('connecting');\n\n        this.socket.onopen = (event) => {\n          console.log('WebSocket Connected', event);\n          this.reconnectAttempts = 0;\n          this.reconnectDelay = 1000;\n          this.updateConnectionStatus('connected');\n          resolve();\n        };\n        \n        this.socket.onerror = (error) => {\n          console.error('WebSocket connection error:', error);\n          this.notifyErrorHandlers(error);\n          this.updateConnectionStatus('error');\n          \n          // Only reject if this is the initial connection attempt\n          if (this.reconnectAttempts === 0) {\n            reject(new Error('Failed to connect to WebSocket'));\n          }\n        };\n\n        this.socket.onmessage = (event) => {\n          try {\n            this.notifyHandlers(event.data);\n          } catch (error) {\n            console.error('Error handling WebSocket message:', error, event.data);\n            this.notifyErrorHandlers(error);\n          }\n        };\n\n        this.socket.onclose = (event) => {\n          console.log('WebSocket Disconnected', event);\n          this.updateConnectionStatus('disconnected');\n          \n          // Don't attempt to reconnect if the close was intentional\n          if (event.code !== 1000) {\n            this.attemptReconnect();\n          }\n        };\n\n        this.socket.onerror = (error) => {\n          console.error('WebSocket Error:', error);\n          this.updateConnectionStatus('error');\n          this.socket.close();\n          reject(error);\n        };\n      } catch (error) {\n        console.error('WebSocket Connection Error:', error);\n        reject(error);\n      }\n    });\n  }\n\n  updateConnectionStatus(status) {\n    this.connectionStatus = status;\n    this.notifyStatusChange(status);\n  }\n\n  onStatusChange(callback) {\n    this.connectionStatusListeners.add(callback);\n    return () => this.connectionStatusListeners.delete(callback);\n  }\n\n  notifyStatusChange(status) {\n    this.connectionStatusListeners.forEach(callback => {\n      try {\n        callback(status);\n      } catch (error) {\n        console.error('Error in status change handler:', error);\n      }\n    });\n  }\n\n  getStatus() {\n    return this.connectionStatus;\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.messageHandlers.clear();\n  }\n\n  sendMessage(message) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(message));\n      return true;\n    }\n    console.error('WebSocket is not connected');\n    return false;\n  }\n\n  removeMessageHandler(handler) {\n    this.messageHandlers.delete(handler);\n  }\n\n  notifyHandlers(message) {\n    this.messageHandlers.forEach(handler => {\n      try {\n        handler(message);\n      } catch (error) {\n        console.error('Error in message handler:', error);\n        this.notifyErrorHandlers(error);\n      }\n    });\n  }\n\n  onError(handler) {\n    if (typeof handler === 'function') {\n      this.errorHandlers.add(handler);\n      return () => this.errorHandlers.delete(handler);\n    }\n    return () => {};\n  }\n\n  removeErrorHandler(handler) {\n    this.errorHandlers.delete(handler);\n  }\n\n  notifyErrorHandlers(error) {\n    this.errorHandlers.forEach(handler => {\n      try {\n        handler(error);\n      } catch (err) {\n        console.error('Error in error handler:', err);\n      }\n    });\n  }\n\n  // Network capture specific methods\n  startCapture(interfaceName) {\n    return this.sendMessage({\n      type: 'start_capture',\n      interface: interfaceName\n    });\n  }\n\n  stopCapture() {\n    return this.sendMessage({\n      type: 'stop_capture'\n    });\n  }\n\n  setFilter(filter) {\n    return this.sendMessage({\n      type: 'set_filter',\n      filter: filter\n    });\n  }\n\n  getInterfaces() {\n    return this.sendMessage({\n      type: 'get_interfaces'\n    });\n  }\n\n  getPackets(limit = 100, filters = {}) {\n    return this.sendMessage({\n      type: 'get_packets',\n      limit,\n      filters\n    });\n  }\n\n  getStats() {\n    return this.sendMessage({\n      type: 'get_stats'\n    });\n  }\n\n  getBandwidth() {\n    return this.sendMessage({\n      type: 'get_bandwidth'\n    });\n  }\n}\n\n// Export a singleton instance\nexport const webSocketService = new WebSocketService();\n\n// Helper hook for React components\nexport const useWebSocket = (onMessage, dependencies = []) => {\n  const [isConnected, setIsConnected] = React.useState(false);\n  const [error, setError] = React.useState(null);\n\n  React.useEffect(() => {\n    const handleMessage = (message) => {\n      if (message.type === 'connection/established') {\n        setIsConnected(true);\n        setError(null);\n      } else if (message.type === 'connection/error') {\n        setError(message.payload);\n      }\n      \n      if (onMessage) {\n        onMessage(message);\n      }\n    };\n\n    // Add the handler\n    const removeHandler = webSocketService.addMessageHandler(handleMessage);\n\n    // Clean up\n    return () => {\n      removeHandler();\n    };\n  }, [onMessage, ...dependencies]);\n\n  return {\n    isConnected,\n    error,\n    sendMessage: webSocketService.sendMessage.bind(webSocketService),\n    startCapture: webSocketService.startCapture.bind(webSocketService),\n    stopCapture: webSocketService.stopCapture.bind(webSocketService),\n    setFilter: webSocketService.setFilter.bind(webSocketService)\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}